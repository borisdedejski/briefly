#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Read .env file
function loadEnv() {
    const envPath = path.join(__dirname, '.env');
    if (!fs.existsSync(envPath)) {
        console.error('‚ùå .env file not found!');
        console.log('Please create a .env file with your credentials:');
        console.log('GOOGLE_CLIENT_ID=your_client_id_here.apps.googleusercontent.com');
        console.log('GOOGLE_CLIENT_SECRET=your_client_secret_here');
        console.log('OPENAI_API_KEY=your_openai_api_key_here');
        process.exit(1);
    }

    const envContent = fs.readFileSync(envPath, 'utf8');
    const env = {};
    
    envContent.split('\n').forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
            env[key.trim()] = valueParts.join('=').trim();
        }
    });

    return env;
}

// Generate manifest.json from template
function buildManifest() {
    const env = loadEnv();
    
    if (!env.GOOGLE_CLIENT_ID) {
        console.error('‚ùå GOOGLE_CLIENT_ID not found in .env file!');
        process.exit(1);
    }
    
    if (!env.GOOGLE_CLIENT_SECRET) {
        console.error('‚ùå GOOGLE_CLIENT_SECRET not found in .env file!');
        process.exit(1);
    }
    
    if (!env.OPENAI_API_KEY) {
        console.error('‚ùå OPENAI_API_KEY not found in .env file!');
        process.exit(1);
    }

    console.log('üîß Building manifest.json...');
    
    // Read template
    const templatePath = path.join(__dirname, 'manifest.template.json');
    const template = fs.readFileSync(templatePath, 'utf8');
    
    // Replace placeholders
    const manifest = template.replace('{{GOOGLE_CLIENT_ID}}', env.GOOGLE_CLIENT_ID);
    
    // Write final manifest
    const manifestPath = path.join(__dirname, 'manifest.json');
    fs.writeFileSync(manifestPath, manifest);
    
    console.log('‚úÖ manifest.json generated successfully!');
    console.log(`üìù Using Google Client ID: ${env.GOOGLE_CLIENT_ID}`);
}

// Generate config.js from environment
function buildConfig() {
    const env = loadEnv();
    
    console.log('üîß Building config.js...');
    
    const configContent = `// Auto-generated from .env file
// Do not edit this file manually

const config = {
    google: {
        clientId: '${env.GOOGLE_CLIENT_ID}',
        clientSecret: '${env.GOOGLE_CLIENT_SECRET || 'YOUR_CLIENT_SECRET'}'
    },
    openai: {
        apiKey: '${env.OPENAI_API_KEY || 'YOUR_OPENAI_API_KEY'}'
    }
};

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = config;
} else {
    // For browser/extension environment
    window.config = config;
}`;
    
    const configPath = path.join(__dirname, 'config.js');
    fs.writeFileSync(configPath, configContent);
    
    console.log('‚úÖ config.js generated successfully!');
}

// Main build process
function build() {
    try {
        buildManifest();
        buildConfig();
        console.log('\nüéâ Build completed successfully!');
        console.log('You can now load the extension in Chrome.');
    } catch (error) {
        console.error('‚ùå Build failed:', error.message);
        process.exit(1);
    }
}

// Run build if this script is executed directly
if (require.main === module) {
    build();
}

module.exports = { build, loadEnv }; 